#!/bin/bash

# *--* Identify box as 32 or 64 bit capable. *--*
Get_CPU_ADDRESS() {
    CPU_ADDRESS=32
    CPUFLAGS=$(cat /proc/cpuinfo |grep '^flags')
    for GL in $CPUFLAGS
    do
        if [ $GL == 'lm' ]
        then
            CPU_ADDRESS=64
        fi
    done
}

Get_DISTRO() {
    DISTRO=${1:-'unknown'}
    Told_distro=$(lsb_release -a 2>/dev/null|grep '^Distributor ID:' |cut -f2 -d: |sed -e 's/^[ \t]*//')
    # *--* Prepare for Distro-specific mods *--*
    if [ $DISTRO == 'unknown' ]
    then
        if [ "${SESSION}." == 'Lubuntu.' ]
        then
            DISTRO='lubuntu'
        elif [ ! -z "${Told_distro}" ]
        then
            DISTRO=$Told_distro
        elif [ $CPU_ADDRESS -eq 32 ]
        then
            DISTRO='lubuntu'
        fi
    fi
}

# *--* Confirm Distro name with user *--*
Confirm_DISTRO_CPU() {
    return_value=0

    prettyprint 'n,t,5,30,45,M,0,n' "You're on a "$CPU_ADDRESS"-bit box running" $DISTRO'.'
    case $DISTRO in
        lubuntu)
            prettyprint '1,32,47,M,0' 'Valid'
            ;;
        LinuxMint|mint)
            prettyprint '1,32,47,M,0' 'Valid'
            ;;
        *)
            prettyprint '1,31,47,M,0,n' 'Invalid. ( Note, you can run this as' $0 'distroname )'
            prettyprint '5,31,47,M,n,0' 'Exiting'
            return_value=16
            ;;
    esac
    prettyprint '1,34,47,M,0' '<ENTER> to continue...'
    read Xu

    return $return_value
}

Contact_server() {
    if [[ $(ssh -p8222 frita@192.168.1.9 'echo $HOSTNAME') =~ 'nuvo-servo' ]]
    then
        Pauze 'Server is valid <ENTER>'
    fi
}

Correct_subversion_ssh() {
    for LOC in ${HOME} /etc
    do
        SUBLOC="${LOC}/subversion"
        if [ -d ${SUBLOC} ]
        then 
            SUBCONF="${SUBLOC}/config"
            if [ -f ${SUBCONF} ]
            then
                prettyprint 'n,t,31,47,M,0' "Fix $SUBCONF for Frita's ssh connection?..."
                read Xr
                case $Xr in
                Y|y)
                perl -pi'.bak' -e 's/#\s*ssh\s(.+?)ssh -q(.+)$/ssh ${1}ssh -p8222 -v${2}/' ${SUBCONF}
                ;;
                *)
                prettyprint 'n,t,34,47,M,0' 'No changes made...'
                ;;
                esac
                break
            fi
        fi
    done
}

Set_background() {
    [[ -z "$Backgrounds_location" ]] || return 9
    [[ -d "$Backgrounds_location" ]] || return 5
    [[ -z "$FreeIT_image" ]] || return 6

    Pauze 'Checking for' $FreeIT_image 'background file'
    Have_BG=$(ls -l ${Backgrounds_location}/$FreeIT_image 2>/dev/null\
                || find ${Backgrounds_location}/ -name "$FreeIT_image"\
                || echo 'NADA')
    if [ "$Have_BG" == 'NADA' ]
    then
        unset xR
        Pauze -n 'Shall I try to retrieve' $FreeIT_image '(Y|N)?' 
        case $xR in
            y|Y)
                cp -iv /home/oem/freeitathenscode/image_scripts/$FreeIT_image\
                ${Backgrounds_location}/ 2>/dev/null || exit 15
                ;;
            *)
                prettyprint '1,34,47,M,0,n' "OK, Handle it later... Movin' on...";sleep 2
                ;;
        esac
    fi
}

# *-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*
prettyprint() {
    Attribute=${1:-'n,7,30,47,M,n,0'}
    shift
    Message=$@
    [[ -z "$Message" ]] && Message='*--------------------------------------------------------*'

    OLDIFS=$IFS;IFS=','
    declare Attr_a=($Attribute)
    IFS=$OLDIFS
    declare -r Attr_len=${#Attr_a[*]}
    Attr_hiidx=$(($Attr_len-1))
    colorattr_pre="\e["
    colorattr_post='m'
    COLORATTR=''

    for idx in $(seq 0 $Attr_hiidx)
    do
        token=${Attr_a[$idx]}
        case $token in
            n)
                echo ''
                ;;
            t)
                echo -en "\n"
                ;;
            M) 
                echo -n $Message
                ;;
            *)
                is_num='N'
                [[ -z $(echo $token |tr -d [0-9]) ]] && is_num='Y'
                if [ $is_num == 'Y' ]
                then
                    if [ $token -lt 8 ]
                    then COLORATTR=${COLORATTR}';'${token}
                    elif [ $token -ge 30 ]
                    then
                        if [ $token -lt 38 ];then COLORATTR=${COLORATTR}';'${token};fi
                    elif [ $token -ge 40 ]
                    then
                        if [ $token -lt 48 ];then COLORATTR=${COLORATTR}';'${token};fi
                    fi 
                    [[ -z ${COLORATTR} ]] || echo -ne "${colorattr_pre}${COLORATTR}${colorattr_post}"   
                fi
                ;;
        esac
    done
    #echo -e "\e[00m"

    return 0
    #Attr=${1:-'n[7,30,47]..[0]n'}
}

Pauze() {
    Just_ran=${1:-'NOT'}
    Will_run=${2:-'NOT'}
    shift 2
    Add_mess=$@
    
    [[ "${Just_ran}." == 'NOT.' ]] || prettyprint 'n,n,0,34,47,M,0,n' 'COMPLETED:' $Just_ran
    [[ -z "$Add_mess" ]] || prettyprint 'n,n,7,33,47,M,0,n' '*--*' $Add_mess '*--*'
    [[ "${Will_run}." == 'NOT.' ]] || prettyprint 'n,n,1,34,47,M,0,n' 'NEXT UP  :' $Will_run
    prettyprint 'n,n,t,5,31,47' 'Hit <Enter> to Continue'
    #echo -e "\n\n\t\e[5;31;47mHit <Enter> to Continue\e[00m\n"
    read xR

}

#/usr/share/lubuntu/wallpapers/: directory
#udevadm info --query=env --name=/dev/sda1 |grep UUID
# if [ 64 -eq $(lscpu |grep '^Arch' |head -n1 |grep -o '64$' ]

#XFCE Only:
    #ensure existence of : /home/*/.config/xfce4/xfconf/
        #xfce-perchannel-xml/xfce4-session.xml: 
        #<property name="SessionName" type="string" value="Default"/>

        #prettyprint '1,32,47,M,0' 'Valid'
